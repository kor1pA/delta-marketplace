generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  description  String?   @db.Text
  imageUrl     String?   @db.VarChar(255) @map("image_url")
  productCount Int?      @default(0) @map("product_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  products     Product[]

  @@map("categories")
}

model Product {
  id              Int                  @id @default(autoincrement())
  name            String               @db.VarChar(255)
  description     String?              @db.Text
  longDescription String?              @db.Text @map("long_description")
  price           Decimal              @db.Decimal(10, 2)
  rating          Decimal?             @default(0) @db.Decimal(3, 1)
  reviewCount     Int?                 @default(0) @map("review_count")
  categoryId      Int?                 @map("category_id")
  inStock         Boolean              @map("in_stock")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @default(now()) @updatedAt @map("updated_at")
  category        Category?            @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  variants        ProductVariant[]
  specifications  ProductSpecification[]
  cartItems       CartItem[]
  reviews         Review[]
  orderItems      OrderItem[]

  @@map("products")
}

model ProductImage {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  filename      String   @db.VarChar(255)
  isPrimary     Boolean  @default(false) @map("is_primary")
  displayOrder  Int      @default(0) @map("display_order")
  imageUrl      String?  @db.VarChar(255) @map("image_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id           Int      @id @default(autoincrement())
  productId    Int      @map("product_id")
  variantType  String   @db.VarChar(50) @map("variant_type")
  variantValue String   @db.VarChar(50) @map("variant_value")
  createdAt    DateTime @default(now()) @map("created_at")
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductSpecification {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  specName  String   @db.VarChar(100) @map("spec_name")
  specValue String   @db.VarChar(255) @map("spec_value")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model User {
  id                 Int           @id @default(autoincrement())
  firstName          String        @db.VarChar(50) @map("first_name")
  lastName           String        @db.VarChar(50) @map("last_name")
  email              String        @unique @db.VarChar(100)
  passwordHash       String        @db.VarChar(255) @map("password_hash")
  phone              String?       @db.VarChar(20)
  role              String        @default("user") @db.VarChar(20)
  emailVerified     Boolean       @default(false) @map("email_verified")
  verificationToken  String?       @db.VarChar(255) @map("verification_token")
  resetToken        String?       @db.VarChar(255) @map("reset_token")
  resetTokenExpires DateTime?     @map("reset_token_expires")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @updatedAt @map("updated_at")
  addresses         UserAddress[]
  cartItems         CartItem[]
  sessions          Session[]
  accounts          Account[]
  reviews           Review[]
  orders            Order[]

  @@map("users")
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  addressLine1 String   @db.VarChar(255) @map("address_line1")
  addressLine2 String?  @db.VarChar(255) @map("address_line2")
  city         String   @db.VarChar(100)
  state        String   @db.VarChar(100)
  postalCode   String   @db.VarChar(20) @map("postal_code")
  country      String   @db.VarChar(100)
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  color     String?  @db.VarChar(50)
  size      String?  @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Session {
  id           String   @id @db.VarChar(255)
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @db.VarChar(255) @map("session_token")
  accessToken  String   @unique @db.VarChar(255) @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  provider          String    @db.VarChar(255)
  providerAccountId String    @db.VarChar(255) @map("provider_account_id")
  refreshToken      String?   @db.Text @map("refresh_token")
  accessToken       String?   @db.Text @map("access_token")
  expiresAt         BigInt?   @map("expires_at")
  tokenType         String?   @db.VarChar(255) @map("token_type")
  scope             String?   @db.VarChar(255)
  idToken          String?   @db.Text @map("id_token")
  sessionState     String?   @db.VarChar(255) @map("session_state")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  userName  String   @db.VarChar(255) @map("user_name")
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int         @map("user_id")
  orderNumber       String      @unique @map("order_number")
  status            String      @default("pending")
  total             Decimal     @db.Decimal(10, 2)
  shippingAddress   String      @db.Text @map("shipping_address")
  paymentStatus     String      @map("payment_status")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at")
  user              User        @relation(fields: [userId], references: [id])
  items             OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}
